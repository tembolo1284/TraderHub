name: TraderHub CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  docker-build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        docker compose version

    - name: Set Execute Permissions
      run: chmod +x docker-run.sh

    - name: Build Docker Image
      run: ./docker-run.sh build

    - name: Run Server and Basic Tests
      run: |
        # Start the server in background
        ./docker-run.sh server &
        
        # Wait for server to be ready
        sleep 10
        
        # Run some basic client commands to verify functionality
        ./docker-run.sh client view
        ./docker-run.sh client submit test_order1 trader1 AAPL 150.50 100 buy
        ./docker-run.sh client view AAPL
        ./docker-run.sh client cancel test_order1 buy

    - name: Clean Up Docker Resources
      if: always()
      run: ./docker-run.sh clean

  coverage-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Coverage Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Build with Coverage
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_COVERAGE=ON
        cmake --build build

    - name: Run Tests with Coverage
      run: |
        cd build
        ctest --output-on-failure
        
        # Generate coverage report
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' '*/build/_deps/*' --output-file coverage.filtered.info
        lcov --list coverage.filtered.info

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: build/coverage.filtered.info
        retention-days: 30

  sanitizer-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, undefined, thread]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm

    - name: Build with Sanitizer
      env:
        CC: clang
        CXX: clang++
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_SANITIZER_${{ matrix.sanitizer }}=ON
        cmake --build build

    - name: Run Tests with Sanitizer
      env:
        ASAN_OPTIONS: detect_leaks=1
        UBSAN_OPTIONS: print_stacktrace=1
        TSAN_OPTIONS: second_deadlock_stack=1
      run: |
        cd build
        ctest --output-on-failure

  release-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Build Release
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build

    - name: Run Release Tests
      run: |
        cd build
        ctest --output-on-failure
