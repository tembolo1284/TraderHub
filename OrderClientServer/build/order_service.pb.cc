// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service.proto

#include "order_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace order_service {
constexpr OrderDetails::OrderDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trader_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stock_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(0)
  , quantity_(0)
  , is_buy_order_(false){}
struct OrderDetailsDefaultTypeInternal {
  constexpr OrderDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderDetailsDefaultTypeInternal() {}
  union {
    OrderDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderDetailsDefaultTypeInternal _OrderDetails_default_instance_;
constexpr OrderRequest::OrderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(nullptr){}
struct OrderRequestDefaultTypeInternal {
  constexpr OrderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderRequestDefaultTypeInternal() {}
  union {
    OrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
constexpr OrderResponse::OrderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , matched_quantity_(0)
  , matched_price_(0){}
struct OrderResponseDefaultTypeInternal {
  constexpr OrderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderResponseDefaultTypeInternal() {}
  union {
    OrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
constexpr CancelRequest::CancelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trader_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_buy_order_(false){}
struct CancelRequestDefaultTypeInternal {
  constexpr CancelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelRequestDefaultTypeInternal() {}
  union {
    CancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
constexpr CancelResponse::CancelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct CancelResponseDefaultTypeInternal {
  constexpr CancelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelResponseDefaultTypeInternal() {}
  union {
    CancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
constexpr ViewOrderBookRequest::ViewOrderBookRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depth_(0){}
struct ViewOrderBookRequestDefaultTypeInternal {
  constexpr ViewOrderBookRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewOrderBookRequestDefaultTypeInternal() {}
  union {
    ViewOrderBookRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewOrderBookRequestDefaultTypeInternal _ViewOrderBookRequest_default_instance_;
constexpr OrderBookEntry::OrderBookEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , details_(nullptr)
  , remaining_quantity_(0){}
struct OrderBookEntryDefaultTypeInternal {
  constexpr OrderBookEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderBookEntryDefaultTypeInternal() {}
  union {
    OrderBookEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderBookEntryDefaultTypeInternal _OrderBookEntry_default_instance_;
constexpr ViewOrderBookResponse::ViewOrderBookResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buy_orders_()
  , sell_orders_()
  , timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_buy_orders_(0)
  , total_sell_orders_(0){}
struct ViewOrderBookResponseDefaultTypeInternal {
  constexpr ViewOrderBookResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewOrderBookResponseDefaultTypeInternal() {}
  union {
    ViewOrderBookResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewOrderBookResponseDefaultTypeInternal _ViewOrderBookResponse_default_instance_;
}  // namespace order_service
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_order_5fservice_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_order_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_order_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_order_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, order_id_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, trader_id_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, stock_symbol_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, price_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, quantity_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderDetails, is_buy_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderRequest, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, message_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, matched_price_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, matched_quantity_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::CancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::CancelRequest, order_id_),
  PROTOBUF_FIELD_OFFSET(::order_service::CancelRequest, is_buy_order_),
  PROTOBUF_FIELD_OFFSET(::order_service::CancelRequest, trader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::CancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::CancelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::order_service::CancelResponse, message_),
  PROTOBUF_FIELD_OFFSET(::order_service::CancelResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookRequest, symbol_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookRequest, depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderBookEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::OrderBookEntry, details_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderBookEntry, remaining_quantity_),
  PROTOBUF_FIELD_OFFSET(::order_service::OrderBookEntry, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, buy_orders_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, sell_orders_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, symbol_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, total_buy_orders_),
  PROTOBUF_FIELD_OFFSET(::order_service::ViewOrderBookResponse, total_sell_orders_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::order_service::OrderDetails)},
  { 12, -1, -1, sizeof(::order_service::OrderRequest)},
  { 19, -1, -1, sizeof(::order_service::OrderResponse)},
  { 31, -1, -1, sizeof(::order_service::CancelRequest)},
  { 40, -1, -1, sizeof(::order_service::CancelResponse)},
  { 49, -1, -1, sizeof(::order_service::ViewOrderBookRequest)},
  { 57, -1, -1, sizeof(::order_service::OrderBookEntry)},
  { 66, -1, -1, sizeof(::order_service::ViewOrderBookResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_OrderDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_OrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_OrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_CancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_CancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_ViewOrderBookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_OrderBookEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::order_service::_ViewOrderBookResponse_default_instance_),
};

const char descriptor_table_protodef_order_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023order_service.proto\022\rorder_service\"\200\001\n"
  "\014OrderDetails\022\020\n\010order_id\030\001 \001(\t\022\021\n\ttrade"
  "r_id\030\002 \001(\t\022\024\n\014stock_symbol\030\003 \001(\t\022\r\n\005pric"
  "e\030\004 \001(\001\022\020\n\010quantity\030\005 \001(\005\022\024\n\014is_buy_orde"
  "r\030\006 \001(\010\"<\n\014OrderRequest\022,\n\007details\030\001 \001(\013"
  "2\033.order_service.OrderDetails\"\250\001\n\rOrderR"
  "esponse\022*\n\006status\030\001 \001(\0162\032.order_service."
  "OrderStatus\022\017\n\007message\030\002 \001(\t\022\025\n\rmatched_"
  "price\030\003 \001(\001\022\030\n\020matched_quantity\030\004 \001(\005\022\026\n"
  "\016transaction_id\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\t"
  "\"J\n\rCancelRequest\022\020\n\010order_id\030\001 \001(\t\022\024\n\014i"
  "s_buy_order\030\002 \001(\010\022\021\n\ttrader_id\030\003 \001(\t\"`\n\016"
  "CancelResponse\022*\n\006status\030\001 \001(\0162\032.order_s"
  "ervice.OrderStatus\022\017\n\007message\030\002 \001(\t\022\021\n\tt"
  "imestamp\030\003 \001(\t\"5\n\024ViewOrderBookRequest\022\016"
  "\n\006symbol\030\001 \001(\t\022\r\n\005depth\030\002 \001(\005\"m\n\016OrderBo"
  "okEntry\022,\n\007details\030\001 \001(\0132\033.order_service"
  ".OrderDetails\022\032\n\022remaining_quantity\030\002 \001("
  "\005\022\021\n\ttimestamp\030\003 \001(\t\"\326\001\n\025ViewOrderBookRe"
  "sponse\0221\n\nbuy_orders\030\001 \003(\0132\035.order_servi"
  "ce.OrderBookEntry\0222\n\013sell_orders\030\002 \003(\0132\035"
  ".order_service.OrderBookEntry\022\021\n\ttimesta"
  "mp\030\003 \001(\t\022\016\n\006symbol\030\004 \001(\t\022\030\n\020total_buy_or"
  "ders\030\005 \001(\005\022\031\n\021total_sell_orders\030\006 \001(\005*s\n"
  "\013OrderStatus\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\020"
  "\n\014PARTIAL_FILL\020\002\022\020\n\014FULLY_FILLED\020\003\022\r\n\tCA"
  "NCELLED\020\004\022\014\n\010REJECTED\020\005\022\t\n\005ERROR\020\0062\340\002\n\014O"
  "rderService\022H\n\013SubmitOrder\022\033.order_servi"
  "ce.OrderRequest\032\034.order_service.OrderRes"
  "ponse\022J\n\013CancelOrder\022\034.order_service.Can"
  "celRequest\032\035.order_service.CancelRespons"
  "e\022Z\n\rViewOrderBook\022#.order_service.ViewO"
  "rderBookRequest\032$.order_service.ViewOrde"
  "rBookResponse\022^\n\017StreamOrderBook\022#.order"
  "_service.ViewOrderBookRequest\032$.order_se"
  "rvice.ViewOrderBookResponse0\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_order_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fservice_2eproto = {
  false, false, 1437, descriptor_table_protodef_order_5fservice_2eproto, "order_service.proto", 
  &descriptor_table_order_5fservice_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_order_5fservice_2eproto::offsets,
  file_level_metadata_order_5fservice_2eproto, file_level_enum_descriptors_order_5fservice_2eproto, file_level_service_descriptors_order_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_order_5fservice_2eproto_getter() {
  return &descriptor_table_order_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_order_5fservice_2eproto(&descriptor_table_order_5fservice_2eproto);
namespace order_service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_5fservice_2eproto);
  return file_level_enum_descriptors_order_5fservice_2eproto[0];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OrderDetails::_Internal {
 public:
};

OrderDetails::OrderDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.OrderDetails)
}
OrderDetails::OrderDetails(const OrderDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(), 
      GetArenaForAllocation());
  }
  trader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trader_id().empty()) {
    trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trader_id(), 
      GetArenaForAllocation());
  }
  stock_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stock_symbol().empty()) {
    stock_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stock_symbol(), 
      GetArenaForAllocation());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_buy_order_) -
    reinterpret_cast<char*>(&price_)) + sizeof(is_buy_order_));
  // @@protoc_insertion_point(copy_constructor:order_service.OrderDetails)
}

void OrderDetails::SharedCtor() {
order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stock_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_buy_order_) -
    reinterpret_cast<char*>(&price_)) + sizeof(is_buy_order_));
}

OrderDetails::~OrderDetails() {
  // @@protoc_insertion_point(destructor:order_service.OrderDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stock_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderDetails::ArenaDtor(void* object) {
  OrderDetails* _this = reinterpret_cast< OrderDetails* >(object);
  (void)_this;
}
void OrderDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.OrderDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  trader_id_.ClearToEmpty();
  stock_symbol_.ClearToEmpty();
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_buy_order_) -
      reinterpret_cast<char*>(&price_)) + sizeof(is_buy_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderDetails.order_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderDetails.trader_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stock_symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stock_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderDetails.stock_symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_buy_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.OrderDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderDetails.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // string trader_id = 2;
  if (!this->_internal_trader_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trader_id().data(), static_cast<int>(this->_internal_trader_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderDetails.trader_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trader_id(), target);
  }

  // string stock_symbol = 3;
  if (!this->_internal_stock_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stock_symbol().data(), static_cast<int>(this->_internal_stock_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderDetails.stock_symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stock_symbol(), target);
  }

  // double price = 4;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_price(), target);
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_quantity(), target);
  }

  // bool is_buy_order = 6;
  if (this->_internal_is_buy_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_buy_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.OrderDetails)
  return target;
}

size_t OrderDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.OrderDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string trader_id = 2;
  if (!this->_internal_trader_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trader_id());
  }

  // string stock_symbol = 3;
  if (!this->_internal_stock_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stock_symbol());
  }

  // double price = 4;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 quantity = 5;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  // bool is_buy_order = 6;
  if (this->_internal_is_buy_order() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderDetails::GetClassData() const { return &_class_data_; }

void OrderDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderDetails *>(to)->MergeFrom(
      static_cast<const OrderDetails &>(from));
}


void OrderDetails::MergeFrom(const OrderDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.OrderDetails)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_trader_id().empty()) {
    _internal_set_trader_id(from._internal_trader_id());
  }
  if (!from._internal_stock_symbol().empty()) {
    _internal_set_stock_symbol(from._internal_stock_symbol());
  }
  if (!(from._internal_price() <= 0 && from._internal_price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_is_buy_order() != 0) {
    _internal_set_is_buy_order(from._internal_is_buy_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderDetails::CopyFrom(const OrderDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.OrderDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDetails::IsInitialized() const {
  return true;
}

void OrderDetails::InternalSwap(OrderDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_id_, lhs_arena,
      &other->order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trader_id_, lhs_arena,
      &other->trader_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stock_symbol_, lhs_arena,
      &other->stock_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderDetails, is_buy_order_)
      + sizeof(OrderDetails::is_buy_order_)
      - PROTOBUF_FIELD_OFFSET(OrderDetails, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[0]);
}

// ===================================================================

class OrderRequest::_Internal {
 public:
  static const ::order_service::OrderDetails& details(const OrderRequest* msg);
};

const ::order_service::OrderDetails&
OrderRequest::_Internal::details(const OrderRequest* msg) {
  return *msg->details_;
}
OrderRequest::OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.OrderRequest)
}
OrderRequest::OrderRequest(const OrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new ::order_service::OrderDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:order_service.OrderRequest)
}

void OrderRequest::SharedCtor() {
details_ = nullptr;
}

OrderRequest::~OrderRequest() {
  // @@protoc_insertion_point(destructor:order_service.OrderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void OrderRequest::ArenaDtor(void* object) {
  OrderRequest* _this = reinterpret_cast< OrderRequest* >(object);
  (void)_this;
}
void OrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.OrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .order_service.OrderDetails details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.OrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .order_service.OrderDetails details = 1;
  if (this->_internal_has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.OrderRequest)
  return target;
}

size_t OrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.OrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .order_service.OrderDetails details = 1;
  if (this->_internal_has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderRequest::GetClassData() const { return &_class_data_; }

void OrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderRequest *>(to)->MergeFrom(
      static_cast<const OrderRequest &>(from));
}


void OrderRequest::MergeFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.OrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_details()) {
    _internal_mutable_details()->::order_service::OrderDetails::MergeFrom(from._internal_details());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderRequest::CopyFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRequest::IsInitialized() const {
  return true;
}

void OrderRequest::InternalSwap(OrderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(details_, other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[1]);
}

// ===================================================================

class OrderResponse::_Internal {
 public:
};

OrderResponse::OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.OrderResponse)
}
OrderResponse::OrderResponse(const OrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&matched_price_) -
    reinterpret_cast<char*>(&status_)) + sizeof(matched_price_));
  // @@protoc_insertion_point(copy_constructor:order_service.OrderResponse)
}

void OrderResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matched_price_) -
    reinterpret_cast<char*>(&status_)) + sizeof(matched_price_));
}

OrderResponse::~OrderResponse() {
  // @@protoc_insertion_point(destructor:order_service.OrderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderResponse::ArenaDtor(void* object) {
  OrderResponse* _this = reinterpret_cast< OrderResponse* >(object);
  (void)_this;
}
void OrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.OrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  timestamp_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matched_price_) -
      reinterpret_cast<char*>(&status_)) + sizeof(matched_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .order_service.OrderStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::order_service::OrderStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderResponse.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double matched_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          matched_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 matched_quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          matched_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderResponse.transaction_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderResponse.timestamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.OrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .order_service.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // double matched_price = 3;
  if (!(this->_internal_matched_price() <= 0 && this->_internal_matched_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_matched_price(), target);
  }

  // int32 matched_quantity = 4;
  if (this->_internal_matched_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_matched_quantity(), target);
  }

  // string transaction_id = 5;
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderResponse.transaction_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_transaction_id(), target);
  }

  // string timestamp = 6;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderResponse.timestamp");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.OrderResponse)
  return target;
}

size_t OrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.OrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string transaction_id = 5;
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // string timestamp = 6;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // .order_service.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 matched_quantity = 4;
  if (this->_internal_matched_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matched_quantity());
  }

  // double matched_price = 3;
  if (!(this->_internal_matched_price() <= 0 && this->_internal_matched_price() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderResponse::GetClassData() const { return &_class_data_; }

void OrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderResponse *>(to)->MergeFrom(
      static_cast<const OrderResponse &>(from));
}


void OrderResponse::MergeFrom(const OrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.OrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_matched_quantity() != 0) {
    _internal_set_matched_quantity(from._internal_matched_quantity());
  }
  if (!(from._internal_matched_price() <= 0 && from._internal_matched_price() >= 0)) {
    _internal_set_matched_price(from._internal_matched_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderResponse::CopyFrom(const OrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.OrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResponse::IsInitialized() const {
  return true;
}

void OrderResponse::InternalSwap(OrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderResponse, matched_price_)
      + sizeof(OrderResponse::matched_price_)
      - PROTOBUF_FIELD_OFFSET(OrderResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[2]);
}

// ===================================================================

class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(), 
      GetArenaForAllocation());
  }
  trader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trader_id().empty()) {
    trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trader_id(), 
      GetArenaForAllocation());
  }
  is_buy_order_ = from.is_buy_order_;
  // @@protoc_insertion_point(copy_constructor:order_service.CancelRequest)
}

void CancelRequest::SharedCtor() {
order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_buy_order_ = false;
}

CancelRequest::~CancelRequest() {
  // @@protoc_insertion_point(destructor:order_service.CancelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelRequest::ArenaDtor(void* object) {
  CancelRequest* _this = reinterpret_cast< CancelRequest* >(object);
  (void)_this;
}
void CancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_.ClearToEmpty();
  trader_id_.ClearToEmpty();
  is_buy_order_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.CancelRequest.order_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_buy_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trader_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.CancelRequest.trader_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.CancelRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // bool is_buy_order = 2;
  if (this->_internal_is_buy_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy_order(), target);
  }

  // string trader_id = 3;
  if (!this->_internal_trader_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trader_id().data(), static_cast<int>(this->_internal_trader_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.CancelRequest.trader_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.CancelRequest)
  return target;
}

size_t CancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.CancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string trader_id = 3;
  if (!this->_internal_trader_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trader_id());
  }

  // bool is_buy_order = 2;
  if (this->_internal_is_buy_order() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelRequest::GetClassData() const { return &_class_data_; }

void CancelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelRequest *>(to)->MergeFrom(
      static_cast<const CancelRequest &>(from));
}


void CancelRequest::MergeFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_trader_id().empty()) {
    _internal_set_trader_id(from._internal_trader_id());
  }
  if (from._internal_is_buy_order() != 0) {
    _internal_set_is_buy_order(from._internal_is_buy_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  return true;
}

void CancelRequest::InternalSwap(CancelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_id_, lhs_arena,
      &other->order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trader_id_, lhs_arena,
      &other->trader_id_, rhs_arena
  );
  swap(is_buy_order_, other->is_buy_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[3]);
}

// ===================================================================

class CancelResponse::_Internal {
 public:
};

CancelResponse::CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:order_service.CancelResponse)
}

void CancelResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:order_service.CancelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelResponse::ArenaDtor(void* object) {
  CancelResponse* _this = reinterpret_cast< CancelResponse* >(object);
  (void)_this;
}
void CancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  timestamp_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .order_service.OrderStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::order_service::OrderStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.CancelResponse.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.CancelResponse.timestamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .order_service.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.CancelResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.CancelResponse.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.CancelResponse)
  return target;
}

size_t CancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.CancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // .order_service.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelResponse::GetClassData() const { return &_class_data_; }

void CancelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelResponse *>(to)->MergeFrom(
      static_cast<const CancelResponse &>(from));
}


void CancelResponse::MergeFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponse::IsInitialized() const {
  return true;
}

void CancelResponse::InternalSwap(CancelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[4]);
}

// ===================================================================

class ViewOrderBookRequest::_Internal {
 public:
};

ViewOrderBookRequest::ViewOrderBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.ViewOrderBookRequest)
}
ViewOrderBookRequest::ViewOrderBookRequest(const ViewOrderBookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:order_service.ViewOrderBookRequest)
}

void ViewOrderBookRequest::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
depth_ = 0;
}

ViewOrderBookRequest::~ViewOrderBookRequest() {
  // @@protoc_insertion_point(destructor:order_service.ViewOrderBookRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewOrderBookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewOrderBookRequest::ArenaDtor(void* object) {
  ViewOrderBookRequest* _this = reinterpret_cast< ViewOrderBookRequest* >(object);
  (void)_this;
}
void ViewOrderBookRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewOrderBookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewOrderBookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.ViewOrderBookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  depth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewOrderBookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.ViewOrderBookRequest.symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewOrderBookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.ViewOrderBookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.ViewOrderBookRequest.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.ViewOrderBookRequest)
  return target;
}

size_t ViewOrderBookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.ViewOrderBookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewOrderBookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewOrderBookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewOrderBookRequest::GetClassData() const { return &_class_data_; }

void ViewOrderBookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewOrderBookRequest *>(to)->MergeFrom(
      static_cast<const ViewOrderBookRequest &>(from));
}


void ViewOrderBookRequest::MergeFrom(const ViewOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.ViewOrderBookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewOrderBookRequest::CopyFrom(const ViewOrderBookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.ViewOrderBookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewOrderBookRequest::IsInitialized() const {
  return true;
}

void ViewOrderBookRequest::InternalSwap(ViewOrderBookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, lhs_arena,
      &other->symbol_, rhs_arena
  );
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewOrderBookRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[5]);
}

// ===================================================================

class OrderBookEntry::_Internal {
 public:
  static const ::order_service::OrderDetails& details(const OrderBookEntry* msg);
};

const ::order_service::OrderDetails&
OrderBookEntry::_Internal::details(const OrderBookEntry* msg) {
  return *msg->details_;
}
OrderBookEntry::OrderBookEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.OrderBookEntry)
}
OrderBookEntry::OrderBookEntry(const OrderBookEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_details()) {
    details_ = new ::order_service::OrderDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  remaining_quantity_ = from.remaining_quantity_;
  // @@protoc_insertion_point(copy_constructor:order_service.OrderBookEntry)
}

void OrderBookEntry::SharedCtor() {
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_quantity_) -
    reinterpret_cast<char*>(&details_)) + sizeof(remaining_quantity_));
}

OrderBookEntry::~OrderBookEntry() {
  // @@protoc_insertion_point(destructor:order_service.OrderBookEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderBookEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete details_;
}

void OrderBookEntry::ArenaDtor(void* object) {
  OrderBookEntry* _this = reinterpret_cast< OrderBookEntry* >(object);
  (void)_this;
}
void OrderBookEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderBookEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderBookEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.OrderBookEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  remaining_quantity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderBookEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .order_service.OrderDetails details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remaining_quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remaining_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.OrderBookEntry.timestamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderBookEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.OrderBookEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .order_service.OrderDetails details = 1;
  if (this->_internal_has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::details(this), target, stream);
  }

  // int32 remaining_quantity = 2;
  if (this->_internal_remaining_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remaining_quantity(), target);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.OrderBookEntry.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.OrderBookEntry)
  return target;
}

size_t OrderBookEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.OrderBookEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // .order_service.OrderDetails details = 1;
  if (this->_internal_has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // int32 remaining_quantity = 2;
  if (this->_internal_remaining_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_remaining_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderBookEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderBookEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderBookEntry::GetClassData() const { return &_class_data_; }

void OrderBookEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderBookEntry *>(to)->MergeFrom(
      static_cast<const OrderBookEntry &>(from));
}


void OrderBookEntry::MergeFrom(const OrderBookEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.OrderBookEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_has_details()) {
    _internal_mutable_details()->::order_service::OrderDetails::MergeFrom(from._internal_details());
  }
  if (from._internal_remaining_quantity() != 0) {
    _internal_set_remaining_quantity(from._internal_remaining_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBookEntry::CopyFrom(const OrderBookEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.OrderBookEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookEntry::IsInitialized() const {
  return true;
}

void OrderBookEntry::InternalSwap(OrderBookEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBookEntry, remaining_quantity_)
      + sizeof(OrderBookEntry::remaining_quantity_)
      - PROTOBUF_FIELD_OFFSET(OrderBookEntry, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderBookEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[6]);
}

// ===================================================================

class ViewOrderBookResponse::_Internal {
 public:
};

ViewOrderBookResponse::ViewOrderBookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buy_orders_(arena),
  sell_orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:order_service.ViewOrderBookResponse)
}
ViewOrderBookResponse::ViewOrderBookResponse(const ViewOrderBookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_orders_(from.buy_orders_),
      sell_orders_(from.sell_orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  ::memcpy(&total_buy_orders_, &from.total_buy_orders_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_sell_orders_) -
    reinterpret_cast<char*>(&total_buy_orders_)) + sizeof(total_sell_orders_));
  // @@protoc_insertion_point(copy_constructor:order_service.ViewOrderBookResponse)
}

void ViewOrderBookResponse::SharedCtor() {
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_buy_orders_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_sell_orders_) -
    reinterpret_cast<char*>(&total_buy_orders_)) + sizeof(total_sell_orders_));
}

ViewOrderBookResponse::~ViewOrderBookResponse() {
  // @@protoc_insertion_point(destructor:order_service.ViewOrderBookResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewOrderBookResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewOrderBookResponse::ArenaDtor(void* object) {
  ViewOrderBookResponse* _this = reinterpret_cast< ViewOrderBookResponse* >(object);
  (void)_this;
}
void ViewOrderBookResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewOrderBookResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewOrderBookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:order_service.ViewOrderBookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_orders_.Clear();
  sell_orders_.Clear();
  timestamp_.ClearToEmpty();
  symbol_.ClearToEmpty();
  ::memset(&total_buy_orders_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_sell_orders_) -
      reinterpret_cast<char*>(&total_buy_orders_)) + sizeof(total_sell_orders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewOrderBookResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .order_service.OrderBookEntry buy_orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .order_service.OrderBookEntry sell_orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.ViewOrderBookResponse.timestamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "order_service.ViewOrderBookResponse.symbol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_buy_orders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_buy_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_sell_orders = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_sell_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewOrderBookResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:order_service.ViewOrderBookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .order_service.OrderBookEntry buy_orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buy_orders(i), target, stream);
  }

  // repeated .order_service.OrderBookEntry sell_orders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sell_orders(i), target, stream);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.ViewOrderBookResponse.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  // string symbol = 4;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "order_service.ViewOrderBookResponse.symbol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_symbol(), target);
  }

  // int32 total_buy_orders = 5;
  if (this->_internal_total_buy_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_buy_orders(), target);
  }

  // int32 total_sell_orders = 6;
  if (this->_internal_total_sell_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_sell_orders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:order_service.ViewOrderBookResponse)
  return target;
}

size_t ViewOrderBookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:order_service.ViewOrderBookResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .order_service.OrderBookEntry buy_orders = 1;
  total_size += 1UL * this->_internal_buy_orders_size();
  for (const auto& msg : this->buy_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .order_service.OrderBookEntry sell_orders = 2;
  total_size += 1UL * this->_internal_sell_orders_size();
  for (const auto& msg : this->sell_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string symbol = 4;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 total_buy_orders = 5;
  if (this->_internal_total_buy_orders() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_buy_orders());
  }

  // int32 total_sell_orders = 6;
  if (this->_internal_total_sell_orders() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_sell_orders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewOrderBookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewOrderBookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewOrderBookResponse::GetClassData() const { return &_class_data_; }

void ViewOrderBookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewOrderBookResponse *>(to)->MergeFrom(
      static_cast<const ViewOrderBookResponse &>(from));
}


void ViewOrderBookResponse::MergeFrom(const ViewOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:order_service.ViewOrderBookResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_orders_.MergeFrom(from.buy_orders_);
  sell_orders_.MergeFrom(from.sell_orders_);
  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_total_buy_orders() != 0) {
    _internal_set_total_buy_orders(from._internal_total_buy_orders());
  }
  if (from._internal_total_sell_orders() != 0) {
    _internal_set_total_sell_orders(from._internal_total_sell_orders());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewOrderBookResponse::CopyFrom(const ViewOrderBookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:order_service.ViewOrderBookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewOrderBookResponse::IsInitialized() const {
  return true;
}

void ViewOrderBookResponse::InternalSwap(ViewOrderBookResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buy_orders_.InternalSwap(&other->buy_orders_);
  sell_orders_.InternalSwap(&other->sell_orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, lhs_arena,
      &other->symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewOrderBookResponse, total_sell_orders_)
      + sizeof(ViewOrderBookResponse::total_sell_orders_)
      - PROTOBUF_FIELD_OFFSET(ViewOrderBookResponse, total_buy_orders_)>(
          reinterpret_cast<char*>(&total_buy_orders_),
          reinterpret_cast<char*>(&other->total_buy_orders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewOrderBookResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace order_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::order_service::OrderDetails* Arena::CreateMaybeMessage< ::order_service::OrderDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::OrderDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::OrderRequest* Arena::CreateMaybeMessage< ::order_service::OrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::OrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::OrderResponse* Arena::CreateMaybeMessage< ::order_service::OrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::OrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::CancelRequest* Arena::CreateMaybeMessage< ::order_service::CancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::CancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::CancelResponse* Arena::CreateMaybeMessage< ::order_service::CancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::CancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::ViewOrderBookRequest* Arena::CreateMaybeMessage< ::order_service::ViewOrderBookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::ViewOrderBookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::OrderBookEntry* Arena::CreateMaybeMessage< ::order_service::OrderBookEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::OrderBookEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::order_service::ViewOrderBookResponse* Arena::CreateMaybeMessage< ::order_service::ViewOrderBookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::order_service::ViewOrderBookResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
