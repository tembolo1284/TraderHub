// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fservice_2eproto;
namespace order_service {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class OrderBookEntry;
struct OrderBookEntryDefaultTypeInternal;
extern OrderBookEntryDefaultTypeInternal _OrderBookEntry_default_instance_;
class OrderDetails;
struct OrderDetailsDefaultTypeInternal;
extern OrderDetailsDefaultTypeInternal _OrderDetails_default_instance_;
class OrderRequest;
struct OrderRequestDefaultTypeInternal;
extern OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class OrderResponse;
struct OrderResponseDefaultTypeInternal;
extern OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
class ViewOrderBookRequest;
struct ViewOrderBookRequestDefaultTypeInternal;
extern ViewOrderBookRequestDefaultTypeInternal _ViewOrderBookRequest_default_instance_;
class ViewOrderBookResponse;
struct ViewOrderBookResponseDefaultTypeInternal;
extern ViewOrderBookResponseDefaultTypeInternal _ViewOrderBookResponse_default_instance_;
}  // namespace order_service
PROTOBUF_NAMESPACE_OPEN
template<> ::order_service::CancelRequest* Arena::CreateMaybeMessage<::order_service::CancelRequest>(Arena*);
template<> ::order_service::CancelResponse* Arena::CreateMaybeMessage<::order_service::CancelResponse>(Arena*);
template<> ::order_service::OrderBookEntry* Arena::CreateMaybeMessage<::order_service::OrderBookEntry>(Arena*);
template<> ::order_service::OrderDetails* Arena::CreateMaybeMessage<::order_service::OrderDetails>(Arena*);
template<> ::order_service::OrderRequest* Arena::CreateMaybeMessage<::order_service::OrderRequest>(Arena*);
template<> ::order_service::OrderResponse* Arena::CreateMaybeMessage<::order_service::OrderResponse>(Arena*);
template<> ::order_service::ViewOrderBookRequest* Arena::CreateMaybeMessage<::order_service::ViewOrderBookRequest>(Arena*);
template<> ::order_service::ViewOrderBookResponse* Arena::CreateMaybeMessage<::order_service::ViewOrderBookResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace order_service {

enum OrderStatus : int {
  UNKNOWN = 0,
  SUCCESS = 1,
  PARTIAL_FILL = 2,
  FULLY_FILLED = 3,
  CANCELLED = 4,
  REJECTED = 5,
  ERROR = 6,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatus_IsValid(int value);
constexpr OrderStatus OrderStatus_MIN = UNKNOWN;
constexpr OrderStatus OrderStatus_MAX = ERROR;
constexpr int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor();
template<typename T>
inline const std::string& OrderStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatus_descriptor(), enum_t_value);
}
inline bool OrderStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
// ===================================================================

class OrderDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderDetails) */ {
 public:
  inline OrderDetails() : OrderDetails(nullptr) {}
  ~OrderDetails() override;
  explicit constexpr OrderDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderDetails(const OrderDetails& from);
  OrderDetails(OrderDetails&& from) noexcept
    : OrderDetails() {
    *this = ::std::move(from);
  }

  inline OrderDetails& operator=(const OrderDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderDetails& operator=(OrderDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderDetails* internal_default_instance() {
    return reinterpret_cast<const OrderDetails*>(
               &_OrderDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderDetails& a, OrderDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderDetails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderDetails* New() const final {
    return new OrderDetails();
  }

  OrderDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderDetails";
  }
  protected:
  explicit OrderDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kTraderIdFieldNumber = 2,
    kStockSymbolFieldNumber = 3,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kIsBuyOrderFieldNumber = 6,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string trader_id = 2;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // string stock_symbol = 3;
  void clear_stock_symbol();
  const std::string& stock_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stock_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stock_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_stock_symbol();
  void set_allocated_stock_symbol(std::string* stock_symbol);
  private:
  const std::string& _internal_stock_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_symbol(const std::string& value);
  std::string* _internal_mutable_stock_symbol();
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 quantity = 5;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_buy_order = 6;
  void clear_is_buy_order();
  bool is_buy_order() const;
  void set_is_buy_order(bool value);
  private:
  bool _internal_is_buy_order() const;
  void _internal_set_is_buy_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.OrderDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_symbol_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  bool is_buy_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderRequest) */ {
 public:
  inline OrderRequest() : OrderRequest(nullptr) {}
  ~OrderRequest() override;
  explicit constexpr OrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRequest(const OrderRequest& from);
  OrderRequest(OrderRequest&& from) noexcept
    : OrderRequest() {
    *this = ::std::move(from);
  }

  inline OrderRequest& operator=(const OrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRequest& operator=(OrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRequest* internal_default_instance() {
    return reinterpret_cast<const OrderRequest*>(
               &_OrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderRequest& a, OrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderRequest* New() const final {
    return new OrderRequest();
  }

  OrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderRequest";
  }
  protected:
  explicit OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // .order_service.OrderDetails details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::order_service::OrderDetails& details() const;
  PROTOBUF_MUST_USE_RESULT ::order_service::OrderDetails* release_details();
  ::order_service::OrderDetails* mutable_details();
  void set_allocated_details(::order_service::OrderDetails* details);
  private:
  const ::order_service::OrderDetails& _internal_details() const;
  ::order_service::OrderDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::order_service::OrderDetails* details);
  ::order_service::OrderDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:order_service.OrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::order_service::OrderDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderResponse) */ {
 public:
  inline OrderResponse() : OrderResponse(nullptr) {}
  ~OrderResponse() override;
  explicit constexpr OrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResponse(const OrderResponse& from);
  OrderResponse(OrderResponse&& from) noexcept
    : OrderResponse() {
    *this = ::std::move(from);
  }

  inline OrderResponse& operator=(const OrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResponse& operator=(OrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResponse* internal_default_instance() {
    return reinterpret_cast<const OrderResponse*>(
               &_OrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderResponse& a, OrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderResponse* New() const final {
    return new OrderResponse();
  }

  OrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderResponse";
  }
  protected:
  explicit OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTransactionIdFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kStatusFieldNumber = 1,
    kMatchedQuantityFieldNumber = 4,
    kMatchedPriceFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string transaction_id = 5;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string timestamp = 6;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .order_service.OrderStatus status = 1;
  void clear_status();
  ::order_service::OrderStatus status() const;
  void set_status(::order_service::OrderStatus value);
  private:
  ::order_service::OrderStatus _internal_status() const;
  void _internal_set_status(::order_service::OrderStatus value);
  public:

  // int32 matched_quantity = 4;
  void clear_matched_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 matched_quantity() const;
  void set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matched_quantity() const;
  void _internal_set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double matched_price = 3;
  void clear_matched_price();
  double matched_price() const;
  void set_matched_price(double value);
  private:
  double _internal_matched_price() const;
  void _internal_set_matched_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.OrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 matched_quantity_;
  double matched_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() override;
  explicit constexpr CancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelRequest* New() const final {
    return new CancelRequest();
  }

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kTraderIdFieldNumber = 3,
    kIsBuyOrderFieldNumber = 2,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string trader_id = 3;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // bool is_buy_order = 2;
  void clear_is_buy_order();
  bool is_buy_order() const;
  void set_is_buy_order(bool value);
  private:
  bool _internal_is_buy_order() const;
  void _internal_set_is_buy_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  bool is_buy_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() override;
  explicit constexpr CancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelResponse* New() const final {
    return new CancelResponse();
  }

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .order_service.OrderStatus status = 1;
  void clear_status();
  ::order_service::OrderStatus status() const;
  void set_status(::order_service::OrderStatus value);
  private:
  ::order_service::OrderStatus _internal_status() const;
  void _internal_set_status(::order_service::OrderStatus value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ViewOrderBookRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.ViewOrderBookRequest) */ {
 public:
  inline ViewOrderBookRequest() : ViewOrderBookRequest(nullptr) {}
  ~ViewOrderBookRequest() override;
  explicit constexpr ViewOrderBookRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewOrderBookRequest(const ViewOrderBookRequest& from);
  ViewOrderBookRequest(ViewOrderBookRequest&& from) noexcept
    : ViewOrderBookRequest() {
    *this = ::std::move(from);
  }

  inline ViewOrderBookRequest& operator=(const ViewOrderBookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewOrderBookRequest& operator=(ViewOrderBookRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewOrderBookRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewOrderBookRequest* internal_default_instance() {
    return reinterpret_cast<const ViewOrderBookRequest*>(
               &_ViewOrderBookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ViewOrderBookRequest& a, ViewOrderBookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewOrderBookRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewOrderBookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewOrderBookRequest* New() const final {
    return new ViewOrderBookRequest();
  }

  ViewOrderBookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewOrderBookRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewOrderBookRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewOrderBookRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewOrderBookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.ViewOrderBookRequest";
  }
  protected:
  explicit ViewOrderBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kDepthFieldNumber = 2,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 depth = 2;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.ViewOrderBookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrderBookEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderBookEntry) */ {
 public:
  inline OrderBookEntry() : OrderBookEntry(nullptr) {}
  ~OrderBookEntry() override;
  explicit constexpr OrderBookEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderBookEntry(const OrderBookEntry& from);
  OrderBookEntry(OrderBookEntry&& from) noexcept
    : OrderBookEntry() {
    *this = ::std::move(from);
  }

  inline OrderBookEntry& operator=(const OrderBookEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookEntry& operator=(OrderBookEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBookEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookEntry* internal_default_instance() {
    return reinterpret_cast<const OrderBookEntry*>(
               &_OrderBookEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrderBookEntry& a, OrderBookEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderBookEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderBookEntry* New() const final {
    return new OrderBookEntry();
  }

  OrderBookEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderBookEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderBookEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderBookEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBookEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderBookEntry";
  }
  protected:
  explicit OrderBookEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 3,
    kDetailsFieldNumber = 1,
    kRemainingQuantityFieldNumber = 2,
  };
  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .order_service.OrderDetails details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::order_service::OrderDetails& details() const;
  PROTOBUF_MUST_USE_RESULT ::order_service::OrderDetails* release_details();
  ::order_service::OrderDetails* mutable_details();
  void set_allocated_details(::order_service::OrderDetails* details);
  private:
  const ::order_service::OrderDetails& _internal_details() const;
  ::order_service::OrderDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::order_service::OrderDetails* details);
  ::order_service::OrderDetails* unsafe_arena_release_details();

  // int32 remaining_quantity = 2;
  void clear_remaining_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_quantity() const;
  void set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remaining_quantity() const;
  void _internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.OrderBookEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::order_service::OrderDetails* details_;
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ViewOrderBookResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.ViewOrderBookResponse) */ {
 public:
  inline ViewOrderBookResponse() : ViewOrderBookResponse(nullptr) {}
  ~ViewOrderBookResponse() override;
  explicit constexpr ViewOrderBookResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewOrderBookResponse(const ViewOrderBookResponse& from);
  ViewOrderBookResponse(ViewOrderBookResponse&& from) noexcept
    : ViewOrderBookResponse() {
    *this = ::std::move(from);
  }

  inline ViewOrderBookResponse& operator=(const ViewOrderBookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewOrderBookResponse& operator=(ViewOrderBookResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewOrderBookResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewOrderBookResponse* internal_default_instance() {
    return reinterpret_cast<const ViewOrderBookResponse*>(
               &_ViewOrderBookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ViewOrderBookResponse& a, ViewOrderBookResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewOrderBookResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewOrderBookResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewOrderBookResponse* New() const final {
    return new ViewOrderBookResponse();
  }

  ViewOrderBookResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewOrderBookResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewOrderBookResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewOrderBookResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewOrderBookResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.ViewOrderBookResponse";
  }
  protected:
  explicit ViewOrderBookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyOrdersFieldNumber = 1,
    kSellOrdersFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSymbolFieldNumber = 4,
    kTotalBuyOrdersFieldNumber = 5,
    kTotalSellOrdersFieldNumber = 6,
  };
  // repeated .order_service.OrderBookEntry buy_orders = 1;
  int buy_orders_size() const;
  private:
  int _internal_buy_orders_size() const;
  public:
  void clear_buy_orders();
  ::order_service::OrderBookEntry* mutable_buy_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >*
      mutable_buy_orders();
  private:
  const ::order_service::OrderBookEntry& _internal_buy_orders(int index) const;
  ::order_service::OrderBookEntry* _internal_add_buy_orders();
  public:
  const ::order_service::OrderBookEntry& buy_orders(int index) const;
  ::order_service::OrderBookEntry* add_buy_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >&
      buy_orders() const;

  // repeated .order_service.OrderBookEntry sell_orders = 2;
  int sell_orders_size() const;
  private:
  int _internal_sell_orders_size() const;
  public:
  void clear_sell_orders();
  ::order_service::OrderBookEntry* mutable_sell_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >*
      mutable_sell_orders();
  private:
  const ::order_service::OrderBookEntry& _internal_sell_orders(int index) const;
  ::order_service::OrderBookEntry* _internal_add_sell_orders();
  public:
  const ::order_service::OrderBookEntry& sell_orders(int index) const;
  ::order_service::OrderBookEntry* add_sell_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >&
      sell_orders() const;

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string symbol = 4;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 total_buy_orders = 5;
  void clear_total_buy_orders();
  ::PROTOBUF_NAMESPACE_ID::int32 total_buy_orders() const;
  void set_total_buy_orders(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_buy_orders() const;
  void _internal_set_total_buy_orders(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_sell_orders = 6;
  void clear_total_sell_orders();
  ::PROTOBUF_NAMESPACE_ID::int32 total_sell_orders() const;
  void set_total_sell_orders(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_sell_orders() const;
  void _internal_set_total_sell_orders(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.ViewOrderBookResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry > buy_orders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry > sell_orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_buy_orders_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_sell_orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderDetails

// string order_id = 1;
inline void OrderDetails::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderDetails::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderDetails::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.order_id)
}
inline std::string* OrderDetails::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.OrderDetails.order_id)
  return _s;
}
inline const std::string& OrderDetails::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderDetails::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderDetails::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderDetails::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.OrderDetails.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderDetails::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderDetails.order_id)
}

// string trader_id = 2;
inline void OrderDetails::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& OrderDetails::trader_id() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderDetails::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.trader_id)
}
inline std::string* OrderDetails::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:order_service.OrderDetails.trader_id)
  return _s;
}
inline const std::string& OrderDetails::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void OrderDetails::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderDetails::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderDetails::release_trader_id() {
  // @@protoc_insertion_point(field_release:order_service.OrderDetails.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderDetails::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderDetails.trader_id)
}

// string stock_symbol = 3;
inline void OrderDetails::clear_stock_symbol() {
  stock_symbol_.ClearToEmpty();
}
inline const std::string& OrderDetails::stock_symbol() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.stock_symbol)
  return _internal_stock_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderDetails::set_stock_symbol(ArgT0&& arg0, ArgT... args) {
 
 stock_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.stock_symbol)
}
inline std::string* OrderDetails::mutable_stock_symbol() {
  std::string* _s = _internal_mutable_stock_symbol();
  // @@protoc_insertion_point(field_mutable:order_service.OrderDetails.stock_symbol)
  return _s;
}
inline const std::string& OrderDetails::_internal_stock_symbol() const {
  return stock_symbol_.Get();
}
inline void OrderDetails::_internal_set_stock_symbol(const std::string& value) {
  
  stock_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderDetails::_internal_mutable_stock_symbol() {
  
  return stock_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderDetails::release_stock_symbol() {
  // @@protoc_insertion_point(field_release:order_service.OrderDetails.stock_symbol)
  return stock_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderDetails::set_allocated_stock_symbol(std::string* stock_symbol) {
  if (stock_symbol != nullptr) {
    
  } else {
    
  }
  stock_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stock_symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderDetails.stock_symbol)
}

// double price = 4;
inline void OrderDetails::clear_price() {
  price_ = 0;
}
inline double OrderDetails::_internal_price() const {
  return price_;
}
inline double OrderDetails::price() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.price)
  return _internal_price();
}
inline void OrderDetails::_internal_set_price(double value) {
  
  price_ = value;
}
inline void OrderDetails::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.price)
}

// int32 quantity = 5;
inline void OrderDetails::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderDetails::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderDetails::quantity() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.quantity)
  return _internal_quantity();
}
inline void OrderDetails::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void OrderDetails::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.quantity)
}

// bool is_buy_order = 6;
inline void OrderDetails::clear_is_buy_order() {
  is_buy_order_ = false;
}
inline bool OrderDetails::_internal_is_buy_order() const {
  return is_buy_order_;
}
inline bool OrderDetails::is_buy_order() const {
  // @@protoc_insertion_point(field_get:order_service.OrderDetails.is_buy_order)
  return _internal_is_buy_order();
}
inline void OrderDetails::_internal_set_is_buy_order(bool value) {
  
  is_buy_order_ = value;
}
inline void OrderDetails::set_is_buy_order(bool value) {
  _internal_set_is_buy_order(value);
  // @@protoc_insertion_point(field_set:order_service.OrderDetails.is_buy_order)
}

// -------------------------------------------------------------------

// OrderRequest

// .order_service.OrderDetails details = 1;
inline bool OrderRequest::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool OrderRequest::has_details() const {
  return _internal_has_details();
}
inline void OrderRequest::clear_details() {
  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::order_service::OrderDetails& OrderRequest::_internal_details() const {
  const ::order_service::OrderDetails* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::OrderDetails&>(
      ::order_service::_OrderDetails_default_instance_);
}
inline const ::order_service::OrderDetails& OrderRequest::details() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.details)
  return _internal_details();
}
inline void OrderRequest::unsafe_arena_set_allocated_details(
    ::order_service::OrderDetails* details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.OrderRequest.details)
}
inline ::order_service::OrderDetails* OrderRequest::release_details() {
  
  ::order_service::OrderDetails* temp = details_;
  details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::OrderDetails* OrderRequest::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:order_service.OrderRequest.details)
  
  ::order_service::OrderDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::order_service::OrderDetails* OrderRequest::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::OrderDetails>(GetArenaForAllocation());
    details_ = p;
  }
  return details_;
}
inline ::order_service::OrderDetails* OrderRequest::mutable_details() {
  ::order_service::OrderDetails* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:order_service.OrderRequest.details)
  return _msg;
}
inline void OrderRequest::set_allocated_details(::order_service::OrderDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::order_service::OrderDetails>::GetOwningArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderRequest.details)
}

// -------------------------------------------------------------------

// OrderResponse

// .order_service.OrderStatus status = 1;
inline void OrderResponse::clear_status() {
  status_ = 0;
}
inline ::order_service::OrderStatus OrderResponse::_internal_status() const {
  return static_cast< ::order_service::OrderStatus >(status_);
}
inline ::order_service::OrderStatus OrderResponse::status() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.status)
  return _internal_status();
}
inline void OrderResponse::_internal_set_status(::order_service::OrderStatus value) {
  
  status_ = value;
}
inline void OrderResponse::set_status(::order_service::OrderStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.status)
}

// string message = 2;
inline void OrderResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& OrderResponse::message() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.message)
}
inline std::string* OrderResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:order_service.OrderResponse.message)
  return _s;
}
inline const std::string& OrderResponse::_internal_message() const {
  return message_.Get();
}
inline void OrderResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderResponse::release_message() {
  // @@protoc_insertion_point(field_release:order_service.OrderResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderResponse.message)
}

// double matched_price = 3;
inline void OrderResponse::clear_matched_price() {
  matched_price_ = 0;
}
inline double OrderResponse::_internal_matched_price() const {
  return matched_price_;
}
inline double OrderResponse::matched_price() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.matched_price)
  return _internal_matched_price();
}
inline void OrderResponse::_internal_set_matched_price(double value) {
  
  matched_price_ = value;
}
inline void OrderResponse::set_matched_price(double value) {
  _internal_set_matched_price(value);
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.matched_price)
}

// int32 matched_quantity = 4;
inline void OrderResponse::clear_matched_quantity() {
  matched_quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResponse::_internal_matched_quantity() const {
  return matched_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResponse::matched_quantity() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.matched_quantity)
  return _internal_matched_quantity();
}
inline void OrderResponse::_internal_set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matched_quantity_ = value;
}
inline void OrderResponse::set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matched_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.matched_quantity)
}

// string transaction_id = 5;
inline void OrderResponse::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& OrderResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.transaction_id)
  return _internal_transaction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_transaction_id(ArgT0&& arg0, ArgT... args) {
 
 transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.transaction_id)
}
inline std::string* OrderResponse::mutable_transaction_id() {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:order_service.OrderResponse.transaction_id)
  return _s;
}
inline const std::string& OrderResponse::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void OrderResponse::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderResponse::release_transaction_id() {
  // @@protoc_insertion_point(field_release:order_service.OrderResponse.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderResponse::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderResponse.transaction_id)
}

// string timestamp = 6;
inline void OrderResponse::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& OrderResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.timestamp)
}
inline std::string* OrderResponse::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:order_service.OrderResponse.timestamp)
  return _s;
}
inline const std::string& OrderResponse::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void OrderResponse::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:order_service.OrderResponse.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderResponse::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderResponse.timestamp)
}

// -------------------------------------------------------------------

// CancelRequest

// string order_id = 1;
inline void CancelRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& CancelRequest::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.CancelRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelRequest.order_id)
}
inline std::string* CancelRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.CancelRequest.order_id)
  return _s;
}
inline const std::string& CancelRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void CancelRequest::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelRequest::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.CancelRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelRequest.order_id)
}

// bool is_buy_order = 2;
inline void CancelRequest::clear_is_buy_order() {
  is_buy_order_ = false;
}
inline bool CancelRequest::_internal_is_buy_order() const {
  return is_buy_order_;
}
inline bool CancelRequest::is_buy_order() const {
  // @@protoc_insertion_point(field_get:order_service.CancelRequest.is_buy_order)
  return _internal_is_buy_order();
}
inline void CancelRequest::_internal_set_is_buy_order(bool value) {
  
  is_buy_order_ = value;
}
inline void CancelRequest::set_is_buy_order(bool value) {
  _internal_set_is_buy_order(value);
  // @@protoc_insertion_point(field_set:order_service.CancelRequest.is_buy_order)
}

// string trader_id = 3;
inline void CancelRequest::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& CancelRequest::trader_id() const {
  // @@protoc_insertion_point(field_get:order_service.CancelRequest.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelRequest::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelRequest.trader_id)
}
inline std::string* CancelRequest::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:order_service.CancelRequest.trader_id)
  return _s;
}
inline const std::string& CancelRequest::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void CancelRequest::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelRequest::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelRequest::release_trader_id() {
  // @@protoc_insertion_point(field_release:order_service.CancelRequest.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelRequest::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelRequest.trader_id)
}

// -------------------------------------------------------------------

// CancelResponse

// .order_service.OrderStatus status = 1;
inline void CancelResponse::clear_status() {
  status_ = 0;
}
inline ::order_service::OrderStatus CancelResponse::_internal_status() const {
  return static_cast< ::order_service::OrderStatus >(status_);
}
inline ::order_service::OrderStatus CancelResponse::status() const {
  // @@protoc_insertion_point(field_get:order_service.CancelResponse.status)
  return _internal_status();
}
inline void CancelResponse::_internal_set_status(::order_service::OrderStatus value) {
  
  status_ = value;
}
inline void CancelResponse::set_status(::order_service::OrderStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:order_service.CancelResponse.status)
}

// string message = 2;
inline void CancelResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CancelResponse::message() const {
  // @@protoc_insertion_point(field_get:order_service.CancelResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelResponse.message)
}
inline std::string* CancelResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:order_service.CancelResponse.message)
  return _s;
}
inline const std::string& CancelResponse::_internal_message() const {
  return message_.Get();
}
inline void CancelResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelResponse::release_message() {
  // @@protoc_insertion_point(field_release:order_service.CancelResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelResponse.message)
}

// string timestamp = 3;
inline void CancelResponse::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& CancelResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:order_service.CancelResponse.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelResponse::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelResponse.timestamp)
}
inline std::string* CancelResponse::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:order_service.CancelResponse.timestamp)
  return _s;
}
inline const std::string& CancelResponse::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void CancelResponse::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelResponse::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:order_service.CancelResponse.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelResponse::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelResponse.timestamp)
}

// -------------------------------------------------------------------

// ViewOrderBookRequest

// string symbol = 1;
inline void ViewOrderBookRequest::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& ViewOrderBookRequest::symbol() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookRequest.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewOrderBookRequest::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookRequest.symbol)
}
inline std::string* ViewOrderBookRequest::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:order_service.ViewOrderBookRequest.symbol)
  return _s;
}
inline const std::string& ViewOrderBookRequest::_internal_symbol() const {
  return symbol_.Get();
}
inline void ViewOrderBookRequest::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewOrderBookRequest::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewOrderBookRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:order_service.ViewOrderBookRequest.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewOrderBookRequest::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.ViewOrderBookRequest.symbol)
}

// int32 depth = 2;
inline void ViewOrderBookRequest::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookRequest::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookRequest::depth() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookRequest.depth)
  return _internal_depth();
}
inline void ViewOrderBookRequest::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void ViewOrderBookRequest::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookRequest.depth)
}

// -------------------------------------------------------------------

// OrderBookEntry

// .order_service.OrderDetails details = 1;
inline bool OrderBookEntry::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool OrderBookEntry::has_details() const {
  return _internal_has_details();
}
inline void OrderBookEntry::clear_details() {
  if (GetArenaForAllocation() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::order_service::OrderDetails& OrderBookEntry::_internal_details() const {
  const ::order_service::OrderDetails* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::OrderDetails&>(
      ::order_service::_OrderDetails_default_instance_);
}
inline const ::order_service::OrderDetails& OrderBookEntry::details() const {
  // @@protoc_insertion_point(field_get:order_service.OrderBookEntry.details)
  return _internal_details();
}
inline void OrderBookEntry::unsafe_arena_set_allocated_details(
    ::order_service::OrderDetails* details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.OrderBookEntry.details)
}
inline ::order_service::OrderDetails* OrderBookEntry::release_details() {
  
  ::order_service::OrderDetails* temp = details_;
  details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::OrderDetails* OrderBookEntry::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:order_service.OrderBookEntry.details)
  
  ::order_service::OrderDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::order_service::OrderDetails* OrderBookEntry::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::OrderDetails>(GetArenaForAllocation());
    details_ = p;
  }
  return details_;
}
inline ::order_service::OrderDetails* OrderBookEntry::mutable_details() {
  ::order_service::OrderDetails* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:order_service.OrderBookEntry.details)
  return _msg;
}
inline void OrderBookEntry::set_allocated_details(::order_service::OrderDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::order_service::OrderDetails>::GetOwningArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderBookEntry.details)
}

// int32 remaining_quantity = 2;
inline void OrderBookEntry::clear_remaining_quantity() {
  remaining_quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookEntry::_internal_remaining_quantity() const {
  return remaining_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderBookEntry::remaining_quantity() const {
  // @@protoc_insertion_point(field_get:order_service.OrderBookEntry.remaining_quantity)
  return _internal_remaining_quantity();
}
inline void OrderBookEntry::_internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remaining_quantity_ = value;
}
inline void OrderBookEntry::set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remaining_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.OrderBookEntry.remaining_quantity)
}

// string timestamp = 3;
inline void OrderBookEntry::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& OrderBookEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:order_service.OrderBookEntry.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderBookEntry::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderBookEntry.timestamp)
}
inline std::string* OrderBookEntry::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:order_service.OrderBookEntry.timestamp)
  return _s;
}
inline const std::string& OrderBookEntry::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void OrderBookEntry::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderBookEntry::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderBookEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:order_service.OrderBookEntry.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderBookEntry::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderBookEntry.timestamp)
}

// -------------------------------------------------------------------

// ViewOrderBookResponse

// repeated .order_service.OrderBookEntry buy_orders = 1;
inline int ViewOrderBookResponse::_internal_buy_orders_size() const {
  return buy_orders_.size();
}
inline int ViewOrderBookResponse::buy_orders_size() const {
  return _internal_buy_orders_size();
}
inline void ViewOrderBookResponse::clear_buy_orders() {
  buy_orders_.Clear();
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::mutable_buy_orders(int index) {
  // @@protoc_insertion_point(field_mutable:order_service.ViewOrderBookResponse.buy_orders)
  return buy_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >*
ViewOrderBookResponse::mutable_buy_orders() {
  // @@protoc_insertion_point(field_mutable_list:order_service.ViewOrderBookResponse.buy_orders)
  return &buy_orders_;
}
inline const ::order_service::OrderBookEntry& ViewOrderBookResponse::_internal_buy_orders(int index) const {
  return buy_orders_.Get(index);
}
inline const ::order_service::OrderBookEntry& ViewOrderBookResponse::buy_orders(int index) const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.buy_orders)
  return _internal_buy_orders(index);
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::_internal_add_buy_orders() {
  return buy_orders_.Add();
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::add_buy_orders() {
  ::order_service::OrderBookEntry* _add = _internal_add_buy_orders();
  // @@protoc_insertion_point(field_add:order_service.ViewOrderBookResponse.buy_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >&
ViewOrderBookResponse::buy_orders() const {
  // @@protoc_insertion_point(field_list:order_service.ViewOrderBookResponse.buy_orders)
  return buy_orders_;
}

// repeated .order_service.OrderBookEntry sell_orders = 2;
inline int ViewOrderBookResponse::_internal_sell_orders_size() const {
  return sell_orders_.size();
}
inline int ViewOrderBookResponse::sell_orders_size() const {
  return _internal_sell_orders_size();
}
inline void ViewOrderBookResponse::clear_sell_orders() {
  sell_orders_.Clear();
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::mutable_sell_orders(int index) {
  // @@protoc_insertion_point(field_mutable:order_service.ViewOrderBookResponse.sell_orders)
  return sell_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >*
ViewOrderBookResponse::mutable_sell_orders() {
  // @@protoc_insertion_point(field_mutable_list:order_service.ViewOrderBookResponse.sell_orders)
  return &sell_orders_;
}
inline const ::order_service::OrderBookEntry& ViewOrderBookResponse::_internal_sell_orders(int index) const {
  return sell_orders_.Get(index);
}
inline const ::order_service::OrderBookEntry& ViewOrderBookResponse::sell_orders(int index) const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.sell_orders)
  return _internal_sell_orders(index);
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::_internal_add_sell_orders() {
  return sell_orders_.Add();
}
inline ::order_service::OrderBookEntry* ViewOrderBookResponse::add_sell_orders() {
  ::order_service::OrderBookEntry* _add = _internal_add_sell_orders();
  // @@protoc_insertion_point(field_add:order_service.ViewOrderBookResponse.sell_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::OrderBookEntry >&
ViewOrderBookResponse::sell_orders() const {
  // @@protoc_insertion_point(field_list:order_service.ViewOrderBookResponse.sell_orders)
  return sell_orders_;
}

// string timestamp = 3;
inline void ViewOrderBookResponse::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& ViewOrderBookResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewOrderBookResponse::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookResponse.timestamp)
}
inline std::string* ViewOrderBookResponse::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:order_service.ViewOrderBookResponse.timestamp)
  return _s;
}
inline const std::string& ViewOrderBookResponse::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void ViewOrderBookResponse::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewOrderBookResponse::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewOrderBookResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:order_service.ViewOrderBookResponse.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewOrderBookResponse::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.ViewOrderBookResponse.timestamp)
}

// string symbol = 4;
inline void ViewOrderBookResponse::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& ViewOrderBookResponse::symbol() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewOrderBookResponse::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookResponse.symbol)
}
inline std::string* ViewOrderBookResponse::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:order_service.ViewOrderBookResponse.symbol)
  return _s;
}
inline const std::string& ViewOrderBookResponse::_internal_symbol() const {
  return symbol_.Get();
}
inline void ViewOrderBookResponse::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewOrderBookResponse::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewOrderBookResponse::release_symbol() {
  // @@protoc_insertion_point(field_release:order_service.ViewOrderBookResponse.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewOrderBookResponse::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.ViewOrderBookResponse.symbol)
}

// int32 total_buy_orders = 5;
inline void ViewOrderBookResponse::clear_total_buy_orders() {
  total_buy_orders_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookResponse::_internal_total_buy_orders() const {
  return total_buy_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookResponse::total_buy_orders() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.total_buy_orders)
  return _internal_total_buy_orders();
}
inline void ViewOrderBookResponse::_internal_set_total_buy_orders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_buy_orders_ = value;
}
inline void ViewOrderBookResponse::set_total_buy_orders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_buy_orders(value);
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookResponse.total_buy_orders)
}

// int32 total_sell_orders = 6;
inline void ViewOrderBookResponse::clear_total_sell_orders() {
  total_sell_orders_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookResponse::_internal_total_sell_orders() const {
  return total_sell_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewOrderBookResponse::total_sell_orders() const {
  // @@protoc_insertion_point(field_get:order_service.ViewOrderBookResponse.total_sell_orders)
  return _internal_total_sell_orders();
}
inline void ViewOrderBookResponse::_internal_set_total_sell_orders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_sell_orders_ = value;
}
inline void ViewOrderBookResponse::set_total_sell_orders(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_sell_orders(value);
  // @@protoc_insertion_point(field_set:order_service.ViewOrderBookResponse.total_sell_orders)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace order_service

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::order_service::OrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::order_service::OrderStatus>() {
  return ::order_service::OrderStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto
