// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fservice_2eproto;
namespace order_service {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class OrderRequest;
struct OrderRequestDefaultTypeInternal;
extern OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class OrderResponse;
struct OrderResponseDefaultTypeInternal;
extern OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
}  // namespace order_service
PROTOBUF_NAMESPACE_OPEN
template<> ::order_service::CancelRequest* Arena::CreateMaybeMessage<::order_service::CancelRequest>(Arena*);
template<> ::order_service::CancelResponse* Arena::CreateMaybeMessage<::order_service::CancelResponse>(Arena*);
template<> ::order_service::OrderRequest* Arena::CreateMaybeMessage<::order_service::OrderRequest>(Arena*);
template<> ::order_service::OrderResponse* Arena::CreateMaybeMessage<::order_service::OrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace order_service {

// ===================================================================

class OrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderRequest) */ {
 public:
  inline OrderRequest() : OrderRequest(nullptr) {}
  ~OrderRequest() override;
  explicit constexpr OrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRequest(const OrderRequest& from);
  OrderRequest(OrderRequest&& from) noexcept
    : OrderRequest() {
    *this = ::std::move(from);
  }

  inline OrderRequest& operator=(const OrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRequest& operator=(OrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRequest* internal_default_instance() {
    return reinterpret_cast<const OrderRequest*>(
               &_OrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderRequest& a, OrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderRequest* New() const final {
    return new OrderRequest();
  }

  OrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderRequest";
  }
  protected:
  explicit OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kTraderIdFieldNumber = 2,
    kStockSymbolFieldNumber = 3,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kIsBuyOrderFieldNumber = 6,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string trader_id = 2;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // string stock_symbol = 3;
  void clear_stock_symbol();
  const std::string& stock_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stock_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stock_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_stock_symbol();
  void set_allocated_stock_symbol(std::string* stock_symbol);
  private:
  const std::string& _internal_stock_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_symbol(const std::string& value);
  std::string* _internal_mutable_stock_symbol();
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 quantity = 5;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_buy_order = 6;
  void clear_is_buy_order();
  bool is_buy_order() const;
  void set_is_buy_order(bool value);
  private:
  bool _internal_is_buy_order() const;
  void _internal_set_is_buy_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.OrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_symbol_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  bool is_buy_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.OrderResponse) */ {
 public:
  inline OrderResponse() : OrderResponse(nullptr) {}
  ~OrderResponse() override;
  explicit constexpr OrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResponse(const OrderResponse& from);
  OrderResponse(OrderResponse&& from) noexcept
    : OrderResponse() {
    *this = ::std::move(from);
  }

  inline OrderResponse& operator=(const OrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResponse& operator=(OrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResponse* internal_default_instance() {
    return reinterpret_cast<const OrderResponse*>(
               &_OrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderResponse& a, OrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderResponse* New() const final {
    return new OrderResponse();
  }

  OrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.OrderResponse";
  }
  protected:
  explicit OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMatchedPriceFieldNumber = 2,
    kMatchedQuantityFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // double matched_price = 2;
  void clear_matched_price();
  double matched_price() const;
  void set_matched_price(double value);
  private:
  double _internal_matched_price() const;
  void _internal_set_matched_price(double value);
  public:

  // int32 matched_quantity = 3;
  void clear_matched_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 matched_quantity() const;
  void set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matched_quantity() const;
  void _internal_set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.OrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  double matched_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 matched_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() override;
  explicit constexpr CancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelRequest* New() const final {
    return new CancelRequest();
  }

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kIsBuyOrderFieldNumber = 2,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // bool is_buy_order = 2;
  void clear_is_buy_order();
  bool is_buy_order() const;
  void set_is_buy_order(bool value);
  private:
  bool _internal_is_buy_order() const;
  void _internal_set_is_buy_order(bool value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  bool is_buy_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() override;
  explicit constexpr CancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelResponse* New() const final {
    return new CancelResponse();
  }

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:order_service.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderRequest

// string order_id = 1;
inline void OrderRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& OrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.order_id)
}
inline std::string* OrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.OrderRequest.order_id)
  return _s;
}
inline const std::string& OrderRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderRequest::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderRequest::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.OrderRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderRequest.order_id)
}

// string trader_id = 2;
inline void OrderRequest::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& OrderRequest::trader_id() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderRequest::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.trader_id)
}
inline std::string* OrderRequest::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:order_service.OrderRequest.trader_id)
  return _s;
}
inline const std::string& OrderRequest::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void OrderRequest::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderRequest::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderRequest::release_trader_id() {
  // @@protoc_insertion_point(field_release:order_service.OrderRequest.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderRequest::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderRequest.trader_id)
}

// string stock_symbol = 3;
inline void OrderRequest::clear_stock_symbol() {
  stock_symbol_.ClearToEmpty();
}
inline const std::string& OrderRequest::stock_symbol() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.stock_symbol)
  return _internal_stock_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderRequest::set_stock_symbol(ArgT0&& arg0, ArgT... args) {
 
 stock_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.stock_symbol)
}
inline std::string* OrderRequest::mutable_stock_symbol() {
  std::string* _s = _internal_mutable_stock_symbol();
  // @@protoc_insertion_point(field_mutable:order_service.OrderRequest.stock_symbol)
  return _s;
}
inline const std::string& OrderRequest::_internal_stock_symbol() const {
  return stock_symbol_.Get();
}
inline void OrderRequest::_internal_set_stock_symbol(const std::string& value) {
  
  stock_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderRequest::_internal_mutable_stock_symbol() {
  
  return stock_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderRequest::release_stock_symbol() {
  // @@protoc_insertion_point(field_release:order_service.OrderRequest.stock_symbol)
  return stock_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderRequest::set_allocated_stock_symbol(std::string* stock_symbol) {
  if (stock_symbol != nullptr) {
    
  } else {
    
  }
  stock_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stock_symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderRequest.stock_symbol)
}

// double price = 4;
inline void OrderRequest::clear_price() {
  price_ = 0;
}
inline double OrderRequest::_internal_price() const {
  return price_;
}
inline double OrderRequest::price() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.price)
  return _internal_price();
}
inline void OrderRequest::_internal_set_price(double value) {
  
  price_ = value;
}
inline void OrderRequest::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.price)
}

// int32 quantity = 5;
inline void OrderRequest::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderRequest::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderRequest::quantity() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.quantity)
  return _internal_quantity();
}
inline void OrderRequest::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void OrderRequest::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.quantity)
}

// bool is_buy_order = 6;
inline void OrderRequest::clear_is_buy_order() {
  is_buy_order_ = false;
}
inline bool OrderRequest::_internal_is_buy_order() const {
  return is_buy_order_;
}
inline bool OrderRequest::is_buy_order() const {
  // @@protoc_insertion_point(field_get:order_service.OrderRequest.is_buy_order)
  return _internal_is_buy_order();
}
inline void OrderRequest::_internal_set_is_buy_order(bool value) {
  
  is_buy_order_ = value;
}
inline void OrderRequest::set_is_buy_order(bool value) {
  _internal_set_is_buy_order(value);
  // @@protoc_insertion_point(field_set:order_service.OrderRequest.is_buy_order)
}

// -------------------------------------------------------------------

// OrderResponse

// string status = 1;
inline void OrderResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& OrderResponse::status() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.status)
}
inline std::string* OrderResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:order_service.OrderResponse.status)
  return _s;
}
inline const std::string& OrderResponse::_internal_status() const {
  return status_.Get();
}
inline void OrderResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderResponse::release_status() {
  // @@protoc_insertion_point(field_release:order_service.OrderResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.OrderResponse.status)
}

// double matched_price = 2;
inline void OrderResponse::clear_matched_price() {
  matched_price_ = 0;
}
inline double OrderResponse::_internal_matched_price() const {
  return matched_price_;
}
inline double OrderResponse::matched_price() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.matched_price)
  return _internal_matched_price();
}
inline void OrderResponse::_internal_set_matched_price(double value) {
  
  matched_price_ = value;
}
inline void OrderResponse::set_matched_price(double value) {
  _internal_set_matched_price(value);
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.matched_price)
}

// int32 matched_quantity = 3;
inline void OrderResponse::clear_matched_quantity() {
  matched_quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResponse::_internal_matched_quantity() const {
  return matched_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderResponse::matched_quantity() const {
  // @@protoc_insertion_point(field_get:order_service.OrderResponse.matched_quantity)
  return _internal_matched_quantity();
}
inline void OrderResponse::_internal_set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matched_quantity_ = value;
}
inline void OrderResponse::set_matched_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matched_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.OrderResponse.matched_quantity)
}

// -------------------------------------------------------------------

// CancelRequest

// string order_id = 1;
inline void CancelRequest::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& CancelRequest::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.CancelRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelRequest.order_id)
}
inline std::string* CancelRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.CancelRequest.order_id)
  return _s;
}
inline const std::string& CancelRequest::_internal_order_id() const {
  return order_id_.Get();
}
inline void CancelRequest::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelRequest::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.CancelRequest.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelRequest.order_id)
}

// bool is_buy_order = 2;
inline void CancelRequest::clear_is_buy_order() {
  is_buy_order_ = false;
}
inline bool CancelRequest::_internal_is_buy_order() const {
  return is_buy_order_;
}
inline bool CancelRequest::is_buy_order() const {
  // @@protoc_insertion_point(field_get:order_service.CancelRequest.is_buy_order)
  return _internal_is_buy_order();
}
inline void CancelRequest::_internal_set_is_buy_order(bool value) {
  
  is_buy_order_ = value;
}
inline void CancelRequest::set_is_buy_order(bool value) {
  _internal_set_is_buy_order(value);
  // @@protoc_insertion_point(field_set:order_service.CancelRequest.is_buy_order)
}

// -------------------------------------------------------------------

// CancelResponse

// string status = 1;
inline void CancelResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CancelResponse::status() const {
  // @@protoc_insertion_point(field_get:order_service.CancelResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.CancelResponse.status)
}
inline std::string* CancelResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:order_service.CancelResponse.status)
  return _s;
}
inline const std::string& CancelResponse::_internal_status() const {
  return status_.Get();
}
inline void CancelResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelResponse::release_status() {
  // @@protoc_insertion_point(field_release:order_service.CancelResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:order_service.CancelResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace order_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto
